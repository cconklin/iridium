grammar Iridium

  rule program
    function_block
  end

  rule function_block
    statement* <Program>
  end

  rule statement
    assignment /
    expression /
    comment
  end

  rule assignment
    assignable space? '=' space? expression <Assignment>
  end

  rule assignable
    '(' space? expression space? ')' assignable_trailer <Term> /
    identifier assignable_trailer? <Term>
  end

  rule assignable_trailer
    '[' arglist? ']' assignable_trailer? <IndexExpression> /
    '.' identifier assignable_trailer? <AttributeExpression>
  end

  rule comp_op
    '==' <Operator> /
    '>=' <Operator> /
    '<=' <Operator> /
    '<' <Operator> /
    '>' <Operator> /
    '!=' <Operator>
  end

  rule or_op
    '|' '|'? <Operator>
  end

  rule and_op
    '&' '&'? <Operator>
  end

  rule xor_op
    '^' <Operator>
  end

  rule shift_op
    '<<' <Operator> /
    '>>' <Operator>
  end

  rule arith_op
    '+' <Operator> /
    '-' <Operator>
  end

  rule factor_op
    '*' <Operator> / 
    '/' <Operator>
  end

  rule expression
    or_expr space? comp_op space? expression <Expression> /
    or_expr
  end

  rule or_expr
    xor_expr space? or_op space? expression <Expression> /
    xor_expr
  end

  rule xor_expr
    and_expr space? xor_op space? xor_expr <Expression> /
    and_expr
  end

  rule and_expr
    shift_expr space? and_op space? and_expr <Expression> /
    shift_expr
  end

  rule shift_expr
    arith_expr space? shift_op space? shift_expr <Expression> /
    arith_expr
  end

  rule arith_expr
    factor space? arith_op space? arith_expr <Expression> /
    factor
  end

  rule factor
    term space? factor_op space? factor <Expression> /
    term
  end

  rule term
    '(' space? expression space? ')' trailer? <Term> /
    literal trailer? <Term> /
    identifier trailer? <Term>
  end

  rule trailer
    '(' arglist? ')' trailer? <Invocation> /
    '[' arglist? ']' trailer? <IndexExpression> /
    '.' identifier trailer? <AttributeExpression>
  end

  rule arglist
    expression space? ',' space? arglist <Arguments> /
    expression
  end

  rule literal
    string / float / integer / array / map / atom
  end

  rule string
    '"' ([^\\"] / "\\" . )* '"' <StringLiteral>
  end

  rule integer
    ('+' / '-')? [0-9]+ <IntegerLiteral>
  end

  rule float
    ('+' / '-')? [0-9]+ '.' [0-9]+ <FloatLiteral>
  end

  rule array
    '[' space? array_content? space? ']' <ArrayLiteral>
  end

  rule array_content
    expression space? ',' space? array_content <ArrayContent> /
    expression
  end

  rule map
    '{' space? map_content? space? '}' <MapLiteral>
  end

  rule map_content
    expression space? '=>' space? expression space? ',' space? map_content <MapContent> /
    identifier ':' space? expression space? ',' space? map_content <MapContent> /
    expression space? '=>' space? expression <MapContent> /
    identifier ':' space? expression <MapContent>
  end

  rule mapping
    expression space? '=>' space? expression /
    identifier ':' space? expression
  end

  rule atom
    ':' (identifier / string) <AtomLiteral>
  end

  rule identifier
    '$'? [a-zA-Z_] [a-zA-Z0-9_]* ('?' / '!')? <Identifier>
  end

  rule comment
    space? '#' [^\n]* ( linebreak / end_of_file )
  end
  
  rule space
    [\s]+
  end
  
  rule linebreak
   [\n]+
  end
  
  rule end_of_file
    !.
  end
end
