grammar Iridium

  ##################
  # Program structure
  
  rule top_block
    (comment / statement / top_statement)* <Block>  
  end
  
  rule block
    (comment / statement)* <Block>
  end
  
  rule class_block
    (comment / class_statement)* <Block>
  end
  
  rule module_block
    (comment / top_statement / class_statement)* <Block>
  end
  
  rule class_statement
    space? (private_method / private_function / method / function / attribute_assignment / index_assignment / invocation / function_invocation / nofunction / nomethod) ';'? space? linebreak? <Statement>
  end

  rule require
    "require" space? string <Require>
  end

  rule top_statement
    space? (private_function / function / class / module / nofunction / require) ';'? space? linebreak? <Statement>
  end
  
  rule statement
    space? (index_assignment / attribute_assignment / assignment / if / unless / while / return / invocation / function_invocation / begin ) ';'? space? linebreak? <Statement>
  end

  ##################
  # Exceptions

  rule begin
    'begin' space block space? rescue_list? space? ensure? 'end' space? <Begin>
  end

  rule rescue_list
    rescue rescue_list? <RescueList>
  end

  rule rescue
    'rescue' space identifier space? '=>' space? identifier space block space? <Rescue> /
    'rescue' space identifier space block space? <Rescue>
  end

  rule ensure
    'ensure' space block <Ensure>
  end

  ##################
  # Literals

  rule integer
    ('+' / '-')? [0-9]+ <IntegerLiteral>
  end

  rule float
    ('+' / '-')? [0-9]+ '.' [0-9]+ <FloatLiteral>
  end

  rule string
    '"' ([^"\\] / "\\" . )* '"' <StringLiteral>
  end

  rule identifier
    '$'? [a-zA-Z_] [a-zA-Z0-9_]* ('?' / '!')? <Identifier>
  end
  
  rule atom
    ':' (identifier / string) <AtomLiteral>
  end
    
  rule array
    '[' space? list_content? space? ']' <ArrayLiteral>
  end
  
  rule dictionary
    '{' space? dict_content? space? '}' <DictionaryLiteral>
  end

  rule list_content
    additive space? ',' space? list_content <ListContent>
    / additive space? <ListContent>
  end
  
  rule dict_content
    additive space '=>' space additive space? ',' space? dict_content <DictionaryContent>
    / additive space '=>' space additive space? <DictionaryContent>
    / dict_key space additive space? ',' space?  dict_content <DictionaryContent>
    / dict_key space additive space? <DictionaryContent>
  end

  rule dict_key
    identifier ':' <DictionaryKey>
  end

  rule literal
    integer / float / string / array / dictionary / atom
  end

  ##################
  # Assignment
  
  rule index_assignment
    idx space? assignment_operator space? (invocation / expression) <IndexAssignment>
  end
  
  rule attribute_assignment
    dot space? assignment_operator space? (invocation / expression) <AttributeAssignment>
  end
  
  rule assignment
    identifier space? assignment_operator space? ( invocation / expression ) <Assignment>
  end

  ##################
  # Functions
  
  rule invocation
    ((dot / primary) space? passed_arguments passed_function? call_chain? <FunctionInvocation>) /
    ((dot / primary) passed_function <FunctionInvocation>)
  end
  
  rule call_chain
    "." (function_invocation / attribute_index / identifier) call_chain? <CallChain>
  end
  
  rule return
    "return" space expression <Return>
  end
  
  rule lambda
    ("->" space
      block
    space? 'end' <Lambda>) /
    ("->" space? argumentlist space?
      block
    space? 'end' <Lambda>)
  end
  
  rule function_invocation
    (identifier space? passed_arguments passed_function? <FunctionInvocation>) /
    (identifier passed_function <FunctionInvocation>)
  end
  
  rule passed_function
    space lambda <PassedFunction>
  end
  
  rule passed_arguments
    ('(' space? allcommaseparated? space? (splat / expression) space? ')' <ArgumentList>) / ('(' space? ')' <ArgumentList>)
  end
  
  rule splat
    '*' space? expression <Splat>
  end

  rule private_function
    'private' space function <PrivateFunction>
  end
  
  rule private_method
    'private' space method <PrivateMethod>
  end

  rule function
    ('function' space identifier space? argumentlist space
      block
    space? 'end' space? <Function>)
    /
    ('function' space identifier space
      block
    space? 'end' space? <Function>)    
  end

  rule method
    ('method' space identifier space? argumentlist space
      block
    space? 'end' space? <Method>)
    /
    ('method' space identifier space
      block
    space? 'end' space? <Method>)
  end

  rule argument
    identifier space? '=' space? (identifier / literal) <Argument> / identifier / '*' space? identifier <Splat>
  end

  rule argumentlist
    ('(' space? commaseparated? space? argument space? ')' <ArgumentList>) / ('(' space? ')' <ArgumentList>)
  end
  
  rule commaseparated
   argument space? ',' space? commaseparated? <CommaSeparated>
  end
  
  rule allcommaseparated
    (splat / expression) space? ',' space? allcommaseparated? <CommaSeparated>
  end

  rule nofunction
    'nofunction' space identifier <NoFunction>
  end

  rule nomethod
    'nomethod' space identifier <NoMethod>
  end


  ##################
  # Objects
  
  rule module
    'module' space identifier space
      module_block
    space? 'end' space? <Module>
  end
  
  rule class
    ('class' space identifier space? '<' space? identifier space
      class_block
    space? 'end' space? <Class>)    
    /
    ('class' space identifier space
      class_block
    space? 'end' space? <Class>)
  end
  
  ##################
  # Flow control

  rule if
    'if' space expression space
      block
    space? elseif?
    space? else? 
    space? 'end' space? <If>
  end

  rule elseif
    'elseif' space expression space
      block
    space? elseif? <ElseIf>
  end
  
  rule else
    'else' space
      block <Else>
  end

  rule unless
    'unless' space expression space
      block
    space? else?   
    space? 'end' <Unless>
  end

  rule while
    'while' space condition space
      block
    space? 'end' space? <While>
  end
    
  rule condition
    (comparative / primary)
  end
  
  ##################
  # Expressions
  
  rule dot
    primary dot_operator dot_chain? identifier <DotExpression>
  end
  
  rule dot_chain
    identifier dot_operator dot_chain? <DotChain>
  end
  
  rule expression
    space? comparative <Expression>
    / space? additive <Expression>
  end

  # For use in a.b[c].d
  rule attribute_index
    identifier space? index_arguments <Index>
  end

  rule index_arguments
    ('[' space? allcommaseparated? space? (splat / expression) space? ']' <IndexArgumentList>) / ('[' space? ']' <IndexArgumentList>)
  end

  rule idx_invoke_chain
    (index_arguments / passed_arguments) idx_invoke_chain? <IndexInvokeChain>
  end

  rule idx_chain
    index_arguments dot_chain? idx_chain? <IndexInvokeChain>
  end

  rule idx
    (dot / primary) space? index_arguments idx_chain? <Index>  
  end

  rule index
    (dot / primary) space? index_arguments idx_invoke_chain? call_chain? <Index>
  end

  rule comparative
    additive space? comparative_operator space? additive <ComparativeExpression>
  end

  rule additive
    multitive space? additive_operator space? additive <AdditiveExpression>
    /
    multitive
  end

  rule multitive
    (dot / primary) space? multitive_operator space? multitive <MultitiveExpression>
    /
    invocation
    /
    index
    /
    dot
    /
    primary
  end

  rule primary
    function_invocation / identifier / float / integer / string / lambda / atom / array / dictionary
    /
    '(' space? expression space? ')' <Expression>
  end

  ##################
  # Operator sets

  rule comparative_operator
    identicality_operator / equality_operator / inequality_operator / greater_than_eq_operator / less_than_eq_operator / greater_than_operator / less_than_operator
  end

  rule additive_operator
    addition_operator / subtraction_operator
  end

  rule multitive_operator
    multiplication_operator / division_operator
  end

  ##################
  # Operators

  rule dot_operator
    "." <DotOperator>
  end

  rule assignment_operator
    '=' <AssignmentOperator>
  end

  rule addition_operator
    '+' <AdditionOperator>
  end

  rule subtraction_operator
    '-' <SubtractionOperator>
  end

  rule multiplication_operator
    '*' <MultiplicationOperator>
  end

  rule division_operator
    '/' <DivisionOperator>
  end

  rule equality_operator
    '==' <EqualityOperator>
  end

  rule inequality_operator
    '!=' <InequalityOperator>
  end

  rule greater_than_operator
    '>' <GreaterThanOperator>
  end

  rule less_than_operator
    '<' <LessThanOperator>
  end

  rule greater_than_eq_operator
    '>=' <GreaterThanEqOperator>
  end

  rule less_than_eq_operator
    '<=' <LessThanEqOperator>
  end
  
  rule identicality_operator
    '===' <IdenticalityOperator>
  end

  ##################
  # Comments

  rule comment
    space? '#' [^\n]* ( linebreak / end_of_file )
  end

  ##################
  # Whitespace

  rule space
    [\s]+
  end

  rule linebreak
   [\n]+
  end

  ##################
  # End of file

  rule end_of_file
    !.
  end

end