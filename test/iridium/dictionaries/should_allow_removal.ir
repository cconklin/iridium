class AssertionError < AttributeError
  method reason
    return "Assertion Failed: " + message
  end
end

function assert(expr, reason="No reason given")
  unless expr
    raise(AssertionError.new(reason))
  end
end

begin
  a = %{:a => 5, "b" => :foo}
  a.remove(:a)
  assert(a[:a] == nil, "(Dictionary#remove()) expected nil, got " + a[:a].inspect())
  # Doesn't mess with displaying/iteration
  assert(a.inspect() == "%{\"b\" => :foo}", "(Dictionary#remove()) expected %{\"b\" => :foo}, got " + a.inspect())

  # can remove from an empty dictionary
  a = %{}
  a.remove(:foo)
  assert(a[:foo] == nil, "(Dictionary#remove()) expected nil, got " + a[:foo].inspect())
rescue AssertionError => e
  puts(e.reason())
  exit(1)
rescue Object => e
  # Some non-AssertionError exception
  puts(e.class().inspect() + ": " + e.reason())  
  exit(3)
end
