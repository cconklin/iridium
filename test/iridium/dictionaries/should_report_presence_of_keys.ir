class AssertionError < AttributeError
  method reason
    return "Assertion Failed: " + message
  end
end

function assert(expr, reason="No reason given")
  unless expr
    raise(AssertionError.new(reason))
  end
end

begin
  # Empty dictionary
  assert(%{}.has_key?(5) == false, "(%{}.has_key?(5)) expected false, got " + %{}.has_key?(5).inspect())

  # Dictionary with one element
  expected = true
  actual = %{:a => 1}.has_key?(:a)
  assert(expected == actual, "(%{:a => 1}.has_key?(:a)) expected " + expected.inspect() + ", got " + actual.inspect())

  # Dictionary with multiple elements
  d = %{:a => 1, "bc" => "bar"}
  expected = false
  actual = d.has_key?(11)
  assert(expected == actual, "(%{:a => 1, \"bc\" => \"bar\"}.has_key?(11)) expected " + expected.inspect() + ", got " + actual.inspect())
  expected = true
  actual = d.has_key?(:a)
  assert(expected == actual, "(%{:a => 1, \"bc\" => \"bar\"}.has_key?(:a)) expected " + expected.inspect() + ", got " + actual.inspect())
rescue AssertionError => e
  puts(e.reason())
  exit(1)
rescue Object => e
  # Some non-AssertionError exception
  puts(e.class().inspect() + ": " + e.reason())  
  exit(3)
end
